{
    textdomain "support";

    // support/registration.ycp

    // functions for registration I/O

    // read registration data from file
    // return complete map

    global define read_registration () ``{
	map regdata = $[];

	// check forename, surname
	// if not set, try to get data from installation

	string name1 = SCR::Read(.rc.registration.REG_NAME1);
	string name2 = SCR::Read(.rc.registration.REG_NAME2);
	if ((name1 == "") || (name2 == "")) {
	    map settings = SCR::Read(.target.ycp, "/var/lib/YaST2/settings.ycp");
	    y2milestone ("settings (%1)", settings);
	    name1 = settings["forename"]:"";
	    name2 = settings["surname"]:"";
	}

	regdata["name1"] = name1;
	regdata["name2"] = name2;

	regdata["salutation"]	= SCR::Read(.rc.registration.REG_SALUTATION);
	regdata["company"]	= SCR::Read(.rc.registration.REG_COMPANY);
	regdata["street"]	= SCR::Read(.rc.registration.REG_STREET);
	regdata["zip"]		= SCR::Read(.rc.registration.REG_ZIP);
	regdata["country"]	= SCR::Read(.rc.registration.REG_COUNTRY);
	regdata["state"]	= SCR::Read(.rc.registration.REG_STATE);
	regdata["city"]		= SCR::Read(.rc.registration.REG_CITY);
	regdata["email"]	= SCR::Read(.rc.registration.REG_EMAIL);
	regdata["regcode"]	= SCR::Read(.rc.registration.REG_CODE);

	return regdata;
    };

    global define write_registration (map regdata) ``{

	SCR::Write(.rc.registration.REG_NAME1,	regdata["name1"]:"");
	SCR::Write(.rc.registration.REG_NAME2,	regdata["name2"]:"");
	SCR::Write(.rc.registration.REG_SALUTATION, regdata["salutation"]:"");
	SCR::Write(.rc.registration.REG_COMPANY,regdata["company"]:"");
	SCR::Write(.rc.registration.REG_STREET,	regdata["street"]:"");
	SCR::Write(.rc.registration.REG_ZIP,	regdata["zip"]:"");
	SCR::Write(.rc.registration.REG_COUNTRY,regdata["country"]:"");
	SCR::Write(.rc.registration.REG_STATE,	regdata["state"]:"");
	SCR::Write(.rc.registration.REG_CITY,	regdata["city"]:"");
	SCR::Write(.rc.registration.REG_EMAIL,	regdata["email"]:"");
	SCR::Write(.rc.registration.REG_CODE,	regdata["regcode"]:"");

	return SCR::Write(.rc.registration, nil);

    };

    // check if registration data is complete.
    // return non-empty message if somethings missing

    global define check_registration (map regdata) ``{

	string message = "";

	if (regdata["salutation"]:"" == "")
	{
	    message = _("Check either Mrs. or Mr.");
	}
	else if (regdata["name1"]:"" == "")
	{
	    message = _("Please enter your first name");
	}
	else if (regdata["name2"]:"" == "")
	{
	    message = _("Please enter your last name");
	}
	else if (regdata["email"]:"" == "")
	{
	    message = _("Enter your e-mail address.");
	}
	else if (size (regdata["regcode"]:"") < 14)
	{
	    // keep the term "support key" in german translation
	    message = _("Please enter your support key");
	}
	else
	{
	    string email = regdata["email"]:"";
	    if ((findfirstof ("@", email) < 0)
		 || (findfirstof (".", email) < 0))
	    {
		message = _("Enter a valid e-mail address");
	    }
	}

	return message;
    };
}
