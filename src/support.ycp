/*
 *
 *
 * $Id$
 */

{
    textdomain "support";


    import "Wizard";
    import "Popup";
    import "CommandLine";
    import "RichText";


    include "support/support_question.ycp";
    include "support/support_send.ycp";

any SupportGUI()
{

    any retval = nil;

    /*
     * exit when running for non-root
     */

    map res = (map) SCR::Execute(.target.bash_output, "/usr/bin/whoami", $[]);
    list l_res = splitstring(res["stdout"]:"", "\n");

    if( size(l_res) > 0 &&  l_res[0]:"" != "root")
    {
        // Popup label (user is not root)
        Popup::Message(_("Log in as root to run SUSE support."));
        return retval;
    }

    integer current_stage = -1;
    // global - not necessary to read data again
    string wrapper_data = "";
    string tmpdir = (string) SCR::Read(.target.tmpdir);

    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("support");
    Wizard::HideBackButton();

    while(true)
    {
	retval = support_question ();

        if (retval == `back
	    || retval == `abort)
	    break;
	else if (retval == `next)
	{
	    retval = `first;
	    // support_send might return `again, loop here
            // but do not need to generate & read info again - only for first time
	    while (retval == `again || retval == `first)
		retval = support_send (retval);

            if (retval == `abort)
	        break;

	    if (retval == `next)
	    {
		// just a final text to give user a 'good' feeling
		Popup::Message (_("The collected information was saved."));
		break;
	    }
	}

        y2milestone( "Ignoring unexpected returncode in support_question(): %1", retval);
    }


    // --------------------------------------------------------------

    Wizard::CloseDialog();
}

/**
 * Command line definition
 */
map cmdline = $[
    /* Commandline help title */
    "help"      : _("Support module"),
    "id"        : "support",
    "guihandler": SupportGUI,
    "initialize": SupportGUI,
    "finish"    : SupportGUI, // FIXME
];

any ret = CommandLine::Run(cmdline);
y2debug("ret=%1", ret);

/* EOF */
}
