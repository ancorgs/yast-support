/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/support/dialogs.ycp
 * Package:	Configuration of support
 * Summary:	Dialogs definitions
 * Authors:	Michal Zugec <mzugec@novell.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "support";

import "Label";
import "Report";
import "Wizard";
import "Support";
import "Map";
include "support/helps.ycp";


any OverviewDialog(){

    /* Command line parameters dialog caption */
    string caption = _("Supportconfig Overview Dialog");

    /* Support configure1 dialog contents */
/*
    term contents = `VBox(
	 `Left(
	   `HBox(
	    `InputField(`id(`tarball_file), _("Package with log files"), Support::log_files["tarball"]:""),
	    `VBox(`Label(""), `PushButton(`id(`browse), Label::BrowseButton()))
	   )),
	  `PushButton(`id(`tarball), _("Create report tarball")),
	  `Left(
	   `HBox(
	    `InputField(`id(`url), _("Upload URL"), Support::options["VAR_OPTION_UPLOAD_TARGET"]:""),
	    `VBox(`Label(""), `PushButton(`id(`upload), `opt(`disabled), _("Upload log files tarball into URL")))
	   )),
	  `PushButton(`id(`browser), `opt(`disabled), _("Execute web browser"))
	);
*/
    term contents = `VBox(
	`Left(
		`Frame(_("Open Novell Support Center"),
		 `VBox(
		  `Label("This will start a browser with Novell Support Center Portal."),
		  `PushButton(`id(`browser), _("Open"))
		  )
		 )
	     ),
	`VSpacing(2),
	`Left(
		`Frame(_("Collect Data"),
		 `VBox(
			`Label(_("This will create tarball with collected log files.")),
			`PushButton(`id(`tarball), _("Create report tarball"))
		      )
		 )
	     ),
	`VSpacing(2),
	`Left(
		`Frame(_("Upload Data"),
		 `VBox(
			`Label(_("This will upload collected logs into specified URL.")),
			`PushButton(`id(`upload), _("Upload"))
		 )
		)
	     )
	);
    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    Wizard::DisableBackButton();

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if (ret == `abort || ret == `tarball || ret == `upload)
		break;
         else
	if (ret == `browser){
         string url="http://www.novell.com/center/eservice";
	  y2milestone("Executing browser %1 with URL %2", Support::browser, url);
	  SCR::Execute(.target.bash, sformat("su $(env|grep LOGNAME|cut -d'=' -f2-) -c \"%1 %2\"", Support::browser, url));
	}
       }
 return ret;
}

any UploadDialog(){
    string caption = _("Supportconfig Upload Dialog");

    string url="";
     if(SCR::Read(.target.size,"/etc/install.inf") > 0) {
	url = (string)SCR::Read(.etc.install_inf.supporturl);
	y2milestone("URL value from /etc/install.inf : %1", url);
     } else y2warning("/etc/install.inf not found");
     if(url==nil){
	url=Support::options["VAR_OPTION_UPLOAD_TARGET"]:"";
	y2milestone("URL value from /etc/supportconfig.conf : %1", url);
     }
    y2milestone("%1", Support::log_files);
    /* Support configure1 dialog contents */
    term contents = `VBox(
	 `Left(
	   `HBox(
	    `InputField(`id(`tarball_file), _("Package with log files"), Support::log_files["tarball"]:""),
	    `VBox(`Label(""), `PushButton(`id(`browse), Label::BrowseButton()))
	   )),
	  `Left(
	   `HBox(
	    `InputField(`id(`url), _("Upload URL"), url),
	    `VBox(`Label(""), `PushButton(`id(`upload), `opt(`disabled), _("Upload log files tarball into URL")))
	   ))
	);
    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
        ret = UI::UserInput();
        if (ret == `abort || ret == `next || ret == `back)
                break;
        if (ret == `browse){
         string tarball_file = UI::AskForExistingFile("/", "*.tgz *.tbz", _("Choose Log Files Tarball File") );
         if (tarball_file != nil && size(tarball_file)>0){
          UI::ChangeWidget(`tarball_file, `Value, tarball_file);
          Support::log_files["tarball"]=tarball_file;
         }
         else
          y2error("Empty or invalid logs tarball path");
         continue;
        }
    }
 return ret;
}

/**
 * Command line parameters dialog
 * @return dialog result
 */
any ParametersDialog () {

    /* Command line parameters dialog caption */
    string caption = _("Supportconfig Parameters Configuration");

    list<term> items = [
	  `item(`id(`use_defaults), _("Use Defaults (ignore  /etc/supportconfig.conf)"), Support::use_defaults),
	  `item(`id(`full_listening), _("Create a full file listing from '/'"), Support::full_listening),
	  `item(`id(`exclude_disk_scan), _("Exclude detailed disk info and scans"), Support::exclude_disk_scan),
	  `item(`id(`search_for_edir), _("Search root filesystem for eDirectory instances"), Support::search_for_edir),
	  `item(`id(`full_logging), _("Activates all support functions"), Support::full_logging),
	  `item(`id(`minimal_logs), _("Only gather a minimum amount of info"), Support::minimal_logs),
	  `item(`id(`include_slp), _("Include full SLP service lists"), Support::include_slp),
	  `item(`id(`rpm_check), _("Performs an rpm -V for each installed rpm"), Support::rpm_check)
	];
    /* Support configure1 dialog contents */
    term contents = `VBox(
	`Left(
	 `HBox(
	  `InputField(`id(`log_dir), _("Log directory"), Support::log_files["tmp_dir"]:""),
	  `VBox(`Label(""), `PushButton(`id(`browse), Label::BrowseButton()))
	 )),
	`MultiSelectionBox(`id(`options), _("Options"), items),
	`PushButton(`id(`expert), _("Expert Settings"))
	);

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

//    Wizard::DisableBackButton();

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
	list selected=(list)UI::QueryWidget(`options, `SelectedItems);
	Support::use_defaults=contains(selected, `use_defaults);
	Support::full_listening=contains(selected, `full_listening);
	Support::exclude_disk_scan=contains(selected, `exclude_disk_scan);
	Support::search_for_edir=contains(selected, `search_for_edir);
	Support::full_logging=contains(selected, `full_logging);
	Support::minimal_logs=contains(selected, `minimal_logs);
	Support::include_slp=contains(selected, `include_slp);
	Support::rpm_check=contains(selected, `rpm_check);
	Support::log_files["tmp_dir"]=(string)UI::QueryWidget(`log_dir, `Value);
	// if "use defaults" is not checked, go to detailed dialog
//	if (!Support::use_defaults) ret = `details;
            break;
        }

	else if (ret == `browse){
	    string dir = UI::AskForExistingDirectory((string)UI::QueryWidget(`log_dir, `Value),  _("Select directory to store log files"));
	    if (dir!=nil) UI::ChangeWidget(`log_dir, `Value, dir);
	    continue;
	}
	else if (ret==`expert) return `expert;
         else {
            y2error("unexpected retcode: %1", ret);
            continue;
         }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
symbol ExpertDialog() {

    /* Support overview dialog caption */
    string caption = _("Supportconfig Expert Configuration");

    list overview = Support::Overview();

	list<term> bool_items = [];
	list<term> table_items = [];
    foreach(string key, (list<string>)Map::Keys(Support::options), {
     if (issubstring(key, "VAR_OPTION"))
      table_items = add(table_items, `item(`id(key), key, Support::options[key]:""));
	else
	 bool_items = add(bool_items, `item(`id(key), key, Support::options[key]:""=="1"));
   });

    /* FIXME table header */
    term contents =
       `HBox(
	`MultiSelectionBox(`id(`opt_msb), _("Default Options"), bool_items),
	`VBox(
	 `Table(`id(`var_table), `header(_("Name"), _("Value")), table_items),
		`PushButton(`id(`edit), Label::EditButton())
	 )
       );

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* edit */
        else if(ret == `edit) {
	    /* FIXME */
	    any id = UI::QueryWidget(`var_table, `CurrentItem);
	    term row = (term)UI::QueryWidget(`var_table, `Item(id));
	    UI::OpenDialog(`VBox(
		 `InputField(`id(`changed_value), row[1]:"", row[2]:""),
		  `HBox(
		   `PushButton(`id(`cancel), Label::CancelButton()),
		   `PushButton(`id(`ok), Label::OKButton())
		  )
		));
	    any ret=UI::UserInput();
	    if (ret==`ok){
		string new_value = (string)UI::QueryWidget(`id(`changed_value), `Value);
		if (new_value != row[2]:"") {
			UI::CloseDialog();
			UI::ChangeWidget(`id(`var_table), `Cell(`id(id), 1), new_value);
			continue;
		}
	    }
	    UI::CloseDialog();
            continue;
        }
        else if( ret == `next ) {
	 y2milestone("store configuration for /etc/supportconfig.conf");
	 list selected_items = (list)UI::QueryWidget(`id(`opt_msb), `SelectedItems);
	 foreach(string key, (list<string>)Map::Keys(Support::options), {
	  string val = Support::options[key]:"";
	  if (issubstring(key, "VAR_OPTION")){
	   string new_val = (string)UI::QueryWidget(`var_table, `Cell(`id(key), 1));
	   if(new_val!=val){
	     y2internal("value changed %1=%2, new value %3", key, val, new_val);
	     Support::options[key]=new_val;
	   }
	  } else{
	    boolean bool_val=(contains(selected_items, key));
	    if ((val=="1")!=bool_val){
	     y2internal("value changed %1=%2, new value %3", key, val, bool_val ? "1" : "0");
	     Support::options[key]=bool_val ? "1" : "0";
	    }
	  }
	 });
            break;
        }
	else if ( ret == `back ) break;
		else {
		 y2error("unexpected retcode: %1", ret);
		 continue;
		}
    }
y2internal("%1", Support::options);
    return (symbol)ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any ContactDialog () {

    /* Support configure2 dialog caption */
    string caption = _("Supportconfig Contact Configuration");

    /* Support configure2 dialog contents */
    term contents = `VBox(
	`Frame (_("Contact Informations"), `VBox(
	  `Left(`InputField(`id(`company), _("Company"), Support::options["VAR_OPTION_CONTACT_COMPANY"]:"")),
	  `Left(`InputField(`id(`email), _("Email Address"), Support::options["VAR_OPTION_CONTACT_EMAIL"]:"")),
	  `Left(`InputField(`id(`name), _("Name"), Support::options["VAR_OPTION_CONTACT_NAME"]:"")),
	  `Left(`InputField(`id(`phone), _("Phone Number"), Support::options["VAR_OPTION_CONTACT_PHONE"]:"")),
	  `Left(`InputField(`id(`storeid), _("Store ID"), Support::options["VAR_OPTION_CONTACT_STOREID"]:"")),
	  `Left(`InputField(`id(`terminalid), _("Terminal ID"), Support::options["VAR_OPTION_CONTACT_TERMINALID"]:""))
	 )),
	`Frame (_("Upload Informations"), `VBox(
	  `Left(`InputField(`id(`target), _("Upload Target"), Support::options["VAR_OPTION_UPLOAD_TARGET"]:"")),
	  `Left(`InputField(`id(`novell_number), _("Novell 11 digit service request number"), Support::novell_number))
	)));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
	  Support::options["VAR_OPTION_CONTACT_COMPANY"]=(string)UI::QueryWidget(`company, `Value);
	  Support::options["VAR_OPTION_CONTACT_EMAIL"]=(string)UI::QueryWidget(`email, `Value);
	  Support::options["VAR_OPTION_CONTACT_NAME"]=(string)UI::QueryWidget(`name, `Value);
	  Support::options["VAR_OPTION_CONTACT_PHONE"]=(string)UI::QueryWidget(`phone, `Value);
	  Support::options["VAR_OPTION_CONTACT_STOREID"]=(string)UI::QueryWidget(`storeid, `Value);
	  Support::options["VAR_OPTION_CONTACT_TERMINALID"]=(string)UI::QueryWidget(`terminalid, `Value);
	  Support::options["VAR_OPTION_UPLOAD_TARGET"]=(string)UI::QueryWidget(`target, `Value);
	  Support::novell_number=(string)UI::QueryWidget(`novell_number, `Value);
	  Support::WriteConfig();
          break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


symbol GenerateDialog () {
    string cmd = sformat("supportconfig %1 -t %2", Support::GetParameterList(), Support::log_files["tmp_dir"]:"");
    string caption = _("Collecting Data");
    term contents = `VBox (
        `LogView (`id (`log), _("Progress"), 1000, 1000)
    );
    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
            Label::BackButton(), Label::NextButton());
    symbol ret = nil;
    integer pid = (integer) SCR::Execute(.process.start_shell, cmd);
    string unfinished_line = "";
    Wizard::DisableNextButton ();
    while (true) {
        sleep (100);
        if (SCR::Read (.process.running, pid) == true) {
            string new_text = (string)SCR::Read (.process.read, pid);
            if (new_text != nil)
                UI::ChangeWidget (`id (`log), `LastLine, new_text);
        } else {
	    Wizard::EnableNextButton ();
	    break;
        }
        ret = (symbol)UI::PollInput();
        if (ret == `back || ret == `abort )
        {
            SCR::Execute (.process.kill, pid);
            break;
        }
    }
    while(ret!=`back && ret!=`abort && ret!=`next){
     ret = (symbol)UI::UserInput();
    }
    return ret;
}



symbol FilesDialog() {
    string caption = _("Collected Data Review");
    // FIXME use list of generated files, as well as directory prefix
	 map output = (map)SCR::Execute(.target.bash_output, sformat("ls -t %1|grep nts|head -n1|tr -d '\n'", Support::log_files["tmp_dir"]:""));
	 y2internal("output %1", output);
	 if (output["exit"]:-1!=0){
	   Popup::Error(output["stderr"]:"");
	   return `back;
	 }
	 Support::log_files["log_dir"]=output["stdout"]:"";
	 string full_log_path=sformat("%1/%2/", Support::log_files["tmp_dir"]:"", Support::log_files["log_dir"]:"");
	 output = (map)SCR::Execute(.target.bash_output, sformat("ls %1", full_log_path));
         if (output["exit"]:-1!=0){
           Popup::Error(output["stderr"]:"");
           return `back;
         }
    list<string> files = filter(string s, splitstring(output["stdout"]:"", "\n"), {return (size(s)>0);});
    term contents = `VBox (
	`HBox (
	    `HStretch(),
	    `ReplacePoint (`id (`filelist_rp),
		`ComboBox (`id (`filelist), `opt (`notify, `hstretch), _("File Name"), files)),
	    `VBox (
		`Label(""),
		`PushButton (`id (`remove), `opt (`hstretch), _("Remove from Data"))
	    ),
	    `HStretch()
	),
	`ReplacePoint (`id (`file_rp),
	    `RichText (`id (`file), `opt (`plainText), "")
//	`MultiLineEdit (`id (`file), `opt (`read_only), _("File Contents"))
	)
    );
    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
            Label::BackButton(), Label::NextButton());
    symbol ret = `filelist;
    while (true) {
	if (ret == `filelist)
	{
	    string file = full_log_path + (string)UI::QueryWidget (`id (`filelist), `Value);
	    string data = (string)SCR::Read (.target.string, file);
	    UI::ReplaceWidget (`id (`file_rp),
		`RichText (`id (`file), `opt (`plainText), data));
//	    UI::ChangeWidget (`id (`file), `Value, data);
	}
	ret = (symbol)UI::UserInput();
	if (ret == `next ){
          string command = sformat("supportconfig %1 -f %2", Support::GetParameterList(), Support::log_files["tmp_dir"]:"");
          y2internal("executing %1", command);
          map<string, any> output = (map<string, any>)SCR::Execute(.target.bash_output, command);
          y2milestone("output %1", output);
          /* Error message */
          if (output["exit"]:-1 != 0) Report::Error (sformat("%1 : %2",_("Cannot write settings"), output));
		else{
			command = sformat("find \"%1\" -type f -name \"%2*\"|tr -d '\n'", Support::log_files["tmp_dir"]:"", Support::log_files["log_dir"]:"");
			y2internal("command %1", command);
			output=(map<string, any>)SCR::Execute(.target.bash_output, command);
			if (output["exit"]:-1 != 0) Report::Error (sformat("%1 : %2", _("Cannot write settings."), output));
			 else{
				if(size(output["stdout"]:"")>0) Support::log_files["tarball"]=output["stdout"]:"";
					else y2error("Empty filename : %1", output);
			     }
		    }
	  break;
	}
	if (ret == `abort || ret == `back)
	    break;
	if (ret == `remove)
	{
	    string file = (string)UI::QueryWidget (`id (`filelist), `Value);
	    files = filter (string f, files, { return f != file; });
	    UI::ReplaceWidget (`id (`filelist_rp),
		`ComboBox (`id (`filelist), `opt (`notify, `hstretch), _("File Name"), files));
	    ret = `filelist;
// FIXME uncomment, following line not tested
	y2internal("removing %1%2", full_log_path, file);
        SCR::Execute (.target.bash, sformat("/bin/rm %1%2", full_log_path, file));
	}
    }
    return ret;
}
/* EOF */
}
