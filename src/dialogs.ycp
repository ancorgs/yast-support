/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/support/dialogs.ycp
 * Package:	Configuration of support
 * Summary:	Dialogs definitions
 * Authors:	Michal Zugec <mzugec@novell.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "support";

import "Label";
import "Wizard";
import "Support";
import "Map";

include "support/helps.ycp";


/**
 * Configure1 dialog
 * @return dialog result
 */
any Configure1Dialog () {

    /* Support configure1 dialog caption */
    string caption = _("OnStar Configuration (1/3)");

    list<term> items = [
	  `item(`id(`use_defaults), _("Use Defaults (ignore  /etc/support.conf)"), Support::use_defaults),
	  `item(`id(`full_listening), _("Create a full file listing from '/'"), Support::full_listening),
	  `item(`id(`exclude_disk_scan), _("Exclude detailed disk info and scans"), Support::exclude_disk_scan),
	  `item(`id(`search_for_edir), _("Search root filesystem for eDirectory instances"), Support::search_for_edir),
	  `item(`id(`full_logging), _("Activates all support functions"), Support::full_logging),
	  `item(`id(`minimal_logs), _("Only gather a minimum amount of info"), Support::minimal_logs),
	  `item(`id(`include_slp), _("Include full SLP service lists"), Support::include_slp),
	  `item(`id(`rpm_check), _("Performs an rpm -V for each installed rpm"), Support::rpm_check)
	];
    /* Support configure1 dialog contents */
    term contents = `VBox(
	`Left(
	 `HBox(
	  `InputField(`id(`log_dir), _("Log directory"), Support::proposed_log_path),
	  `VBox(`Label(""), `PushButton(`id(`browse), Label::BrowseButton()))
	 )),
	`MultiSelectionBox(`id(`options), _("Options"), items)
	);

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    Wizard::DisableBackButton();

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
	list selected=(list)UI::QueryWidget(`options, `SelectedItems);
	Support::use_defaults=contains(selected, `use_defaults);
	Support::full_listening=contains(selected, `full_listening);
	Support::exclude_disk_scan=contains(selected, `exclude_disk_scan);
	Support::search_for_edir=contains(selected, `search_for_edir);
	Support::full_logging=contains(selected, `full_logging);
	Support::minimal_logs=contains(selected, `minimal_logs);
	Support::include_slp=contains(selected, `include_slp);
	Support::rpm_check=contains(selected, `rpm_check);
	Support::proposed_log_path=(string)UI::QueryWidget(`log_dir, `Value);
	// if "use defaults" is not checked, go to detailed dialog
	if (!Support::use_defaults) ret = `details;
            break;
        }
	else if (ret == `browse){
	    string dir = UI::AskForExistingDirectory((string)UI::QueryWidget(`log_dir, `Value),  _("Select directory to store log files"));
	    if (dir!=nil) UI::ChangeWidget(`log_dir, `Value, dir);
	    continue;
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any ConfigurationDialog() {

    /* Support overview dialog caption */
    string caption = _("OnStar Detailed Configuration (2/3)");

    list overview = Support::Overview();

	list<term> bool_items = [];
	list<term> table_items = [];
    foreach(string key, (list<string>)Map::Keys(Support::options), {
     if (issubstring(key, "VAR_OPTION"))
      table_items = add(table_items, `item(`id(key), key, Support::options[key]:""));
	else
	 bool_items = add(bool_items, `item(`id(key), key, Support::options[key]:""=="1"));
   });

    /* FIXME table header */
    term contents =
       `HBox(
	`MultiSelectionBox(`id(`opt_msb), _("Default Options"), bool_items),
	`VBox(
	 `Table(`id(`var_table), `header(_("Name"), _("Value")), table_items),
		`PushButton(`id(`edit), Label::EditButton())
	 )
       );

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* edit */
        else if(ret == `edit) {
	    /* FIXME */
	    any id = UI::QueryWidget(`var_table, `CurrentItem);
	    term row = (term)UI::QueryWidget(`var_table, `Item(id));
	    UI::OpenDialog(`VBox(
		 `InputField(`id(`changed_value), row[1]:"", row[2]:""),
		  `HBox(
		   `PushButton(`id(`cancel), Label::CancelButton()),
		   `PushButton(`id(`ok), Label::OKButton())
		  )
		));
	    any ret=UI::UserInput();
	    if (ret==`ok){
		string new_value = (string)UI::QueryWidget(`id(`changed_value), `Value);
		if (new_value != row[2]:"") {
			UI::CloseDialog();
			UI::ChangeWidget(`id(`var_table), `Cell(`id(id), 1), new_value);
			continue;
		}
	    }
	    UI::CloseDialog();
            continue;
        }
        else if(ret == `next || ret == `back) {
	 y2milestone("store configuration for /etc/support.conf");
	 list selected_items = (list)UI::QueryWidget(`id(`opt_msb), `SelectedItems);
	 foreach(string key, (list<string>)Map::Keys(Support::options), {
	  string val = Support::options[key]:"";
	  if (issubstring(key, "VAR_OPTION")){
	   string new_val = (string)UI::QueryWidget(`var_table, `Cell(`id(key), 1));
	   if(new_val!=val){
	     y2internal("value changed %1=%2, new value %3", key, val, new_val);
	     Support::options[key]=new_val;
	   }
	  } else{
	    boolean bool_val=(contains(selected_items, key));
	    if ((val=="1")!=bool_val){
	     y2internal("value changed %1=%2, new value %3", key, val, bool_val ? "1" : "0");
	     Support::options[key]=bool_val ? "1" : "0";
	    }
	  }
	 });
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }
y2internal("%1", Support::options);
    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any ContactDialog () {

    /* Support configure2 dialog caption */
    string caption = _("OnStar Detailed Configuration (3/3)");

    /* Support configure2 dialog contents */
    term contents = `VBox(
	`Frame (_("Contact Informations"), `VBox(
	  `Left(`InputField(`id(`company), _("Company"), Support::options["VAR_OPTION_CONTACT_COMPANY"]:"")),
	  `Left(`InputField(`id(`email), _("Email Address"), Support::options["VAR_OPTION_CONTACT_EMAIL"]:"")),
	  `Left(`InputField(`id(`name), _("Name"), Support::options["VAR_OPTION_CONTACT_NAME"]:"")),
	  `Left(`InputField(`id(`phone), _("Phone Number"), Support::options["VAR_OPTION_CONTACT_PHONE"]:""))
	 )),
	`Frame (_("Upload Informations"), `VBox(
	  `Left(`InputField(`id(`target), _("Upload Target"), Support::options["VAR_OPTION_UPLOAD_TARGET"]:"")),
	  `Left(`InputField(`id(`novell_number), _("Novell 11 digit service request number"), Support::novell_number))
	)));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
	  Support::options["VAR_OPTION_CONTACT_COMPANY"]=(string)UI::QueryWidget(`company, `Value);
	  Support::options["VAR_OPTION_CONTACT_EMAIL"]=(string)UI::QueryWidget(`email, `Value);
	  Support::options["VAR_OPTION_CONTACT_NAME"]=(string)UI::QueryWidget(`name, `Value);
	  Support::options["VAR_OPTION_CONTACT_PHONE"]=(string)UI::QueryWidget(`phone, `Value);
	  Support::options["VAR_OPTION_UPLOAD_TARGET"]=(string)UI::QueryWidget(`target, `Value);
	  Support::novell_number=(string)UI::QueryWidget(`novell_number, `Value);
	  Support::WriteConfig();
          break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


symbol GenerateDialog () {
    string cmd = sformat("support %1 -t %2", Support::GetParameterList(), Support::proposed_log_path);
    string caption = _("Collecting Data");
    term contents = `VBox (
        `LogView (`id (`log), _("Progress"), 1000, 1000)
    );
    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
            Label::BackButton(), Label::NextButton());
    symbol ret = nil;
    integer pid = (integer) SCR::Execute(.process.start_shell, cmd);
    string unfinished_line = "";
    Wizard::DisableNextButton ();
    while (true) {
        sleep (100);
        if (SCR::Read (.process.running, pid) == true) {
            string new_text = (string)SCR::Read (.process.read, pid);
            if (new_text != nil)
                UI::ChangeWidget (`id (`log), `LastLine, new_text);
        } else {
	    Wizard::EnableNextButton ();
	    break;
        }
        ret = (symbol)UI::PollInput();
        if (ret == `back || ret == `abort )
        {
            SCR::Execute (.process.kill, pid);
            break;
        }
    }
    while(ret!=`back && ret!=`abort && ret!=`next){
     ret = (symbol)UI::UserInput();
    }
    return ret;
}


/*
any FilesDialog(){
    string caption = _("OnStar Included Files Configuration (3/3)");
    term contents = `VBox(
	`HBox(
		`PushButton(`id(`start_support), _("Trigger to collect logs")),
		`InputField(`id(`directory_path), `opt(`disabled), _("Path to log directory"), Support::proposed_log_path)
	   ),
	  `LogView(`id(`lw), _("Log Files"), 19, 0)
	);

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
            Label::BackButton(), Label::NextButton());
    Wizard::DisableNextButton();
    any ret = nil;
    string full_log_path="";
    while(true) {

        ret = UI::UserInput();

        if(ret == `abort || ret == `cancel) {
            if(ReallyAbort()) break;
            else continue;
        }
	else if(ret==`start_support){
	 y2internal("Gathering system configuration logs");

	 string command = sformat("support %1 -t %2", Support::GetParameterList(), Support::proposed_log_path);
	 y2internal("command %1", command);
import "LogViewCore";
LogViewCore::Start((term)`id(`lw), $["command":command]);
while(LogViewCore::IsProcessRunning()){
 LogViewCore::Update((term)`id(`lw));
 sleep(1000);
 y2internal("sleeping");
}
	Wizard::EnableNextButton();
	 continue;
	}
        else if(ret == `next || ret == `back) {
	 y2milestone("Creating output tarball");
	 string command = sformat("support %1 -f %2", Support::GetParameterList(), Support::proposed_log_path);

          break;
        }
	else if (ret==`show_file){
	 string selected_item = (string)UI::QueryWidget(`file_list, `CurrentItem);

	 UI::OpenDialog( `opt(`defaultsize),
		`VBox(
		      `RichText( `id(`rt), ""),
		      `HBox(`PushButton(`id(`close), Label::CloseButton()))
		     )
		);
	 string command=sformat("cat %1/%2", full_log_path, selected_item);
	 y2internal("command %1", command);
	 map output=(map)SCR::Execute(.target.bash_output, command);
	 UI::ChangeWidget(`rt, `Value, output["stdout"]:"");
	 UI::UserInput();
	 UI::CloseDialog();
	}
	else if (ret==`delete_file){
	 string selected_item = (string)UI::QueryWidget(`file_list, `CurrentItem);
	 if (Popup::ContinueCancel(sformat(_("Really delete %1 file?"), selected_item))){
	  if((integer)SCR::Execute(.target.bash, sformat("rm %1/%2", full_log_path, selected_item))==0){
           map output = (map)SCR::Execute(.target.bash_output, sformat("ls %1", full_log_path));
           UI::ChangeWidget(`file_list, `Items, filter(string s, splitstring(output["stdout"]:"", "\n"), {return (size(s)>0);}));
	  }
	 }
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }
    return ret;
}
*/

symbol FilesDialog2() {
    string caption = _("Collected Data Review");
    // FIXME use list of generated files, as well as directory prefix
	 map output = (map)SCR::Execute(.target.bash_output, sformat("ls -t %1|head -n1|tr -d '\n'", Support::proposed_log_path));
	 y2internal("output %1", output);
	 if (output["exit"]:-1!=0){
	   Popup::Error(output["stderr"]:"");
	   return `back;
	 }
	 Support::created_directory=output["stdout"]:"";
	 string full_log_path=sformat("%1/%2/", Support::proposed_log_path, Support::created_directory);
	 output = (map)SCR::Execute(.target.bash_output, sformat("ls %1", full_log_path));
         if (output["exit"]:-1!=0){
           Popup::Error(output["stderr"]:"");
           return `back;
         }
    list<string> files = filter(string s, splitstring(output["stdout"]:"", "\n"), {return (size(s)>0);});
    term contents = `VBox (
	`HBox (
	    `HStretch(),
	    `ReplacePoint (`id (`filelist_rp),
		`ComboBox (`id (`filelist), `opt (`notify, `hstretch), _("File Name"), files)),
	    `VBox (
		`Label(""),
		`PushButton (`id (`remove), `opt (`hstretch), _("Remove from Data"))
	    ),
	    `HStretch()
	),
	`ReplacePoint (`id (`file_rp),
	    `RichText (`id (`file), `opt (`plainText), "")
//	`MultiLineEdit (`id (`file), `opt (`read_only), _("File Contents"))
	)
    );
    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
            Label::BackButton(), Label::NextButton());
    symbol ret = `filelist;
    while (true) {
	if (ret == `filelist)
	{
	    string file = full_log_path + (string)UI::QueryWidget (`id (`filelist), `Value);
	    string data = (string)SCR::Read (.target.string, file);
	    UI::ReplaceWidget (`id (`file_rp),
		`RichText (`id (`file), `opt (`plainText), data));
//	    UI::ChangeWidget (`id (`file), `Value, data);
	}
	ret = (symbol)UI::UserInput();
	if (ret == `next || ret == `abort || ret == `back)
	    break;
	if (ret == `remove)
	{
	    string file = (string)UI::QueryWidget (`id (`filelist), `Value);
	    files = filter (string f, files, { return f != file; });
	    UI::ReplaceWidget (`id (`filelist_rp),
		`ComboBox (`id (`filelist), `opt (`notify, `hstretch), _("File Name"), files));
	    ret = `filelist;
// FIXME uncomment, following line not tested
	y2internal("removing %1%2", full_log_path, file);
        SCR::Execute (.target.bash, sformat("/bin/rm %1%2", full_log_path, file));
	}
    }
    return ret;
}
/* EOF */
}
