/**
 * support_send.ycp
 *
 * sending a support question
 *
 * Author: Klaus Kaempf <kkaempf@suse.de>
 *
 * $Id$
 *
 */
{
    textdomain "support";

    map send_options = $[
	"mail"		: _("via &email"),
	"file"		: _("&local file"),
	"floppy"	: _("to &floppy disk"),
	"html"		: _("&view"),
	"tex"		: _("&TeX")
    ];


    // set up and execute wrapper script

    string tmpdir = SCR::Read(.target.tmpdir);

    string reg_file = "/var/lib/support/rc.registration";

    string user_data = "---\n" + lookup (regdata, "question", "") + "\n---\n";
    string user_file = tmpdir + "/user.out";

    SCR::Write(.target.string, user_file, user_data);

    string wrapper_file = tmpdir+"/wrapper.out";
    string wrapper_options = "";
    string output_format = "plain";
    foreach (`option, `optval, regdata,
    ``{
	if ((substring (option, 0, 2) == "--")
	    && (optval == true))
	{
	    if (option == "--all")
		output_format = "html";
	    wrapper_options = wrapper_options + " " + option;
	}
    });
    string wrapper_cmd = "/var/lib/support/wrapper --output="
	+ output_format
	+ wrapper_options
	+" >"
	+ wrapper_file;
    y2milestone ("running %1", wrapper_cmd);
    SCR::Execute(.target.bash, wrapper_cmd);

    // read output from wrapper
    string wrapper_data = SCR::Read(.target.string, wrapper_file);

    // helptext 1 of 3
    string help = _("<p><b>Support Data</b></p>\n");

    //helptext 2 of 3
    help = help + _("<p>Here you will see an overview of the information you 
transmitted. The transfer takes place by HTTP uploading.</p>");

    //helptext 3 of 3
    help = help + _("<p>If you do not have Internet access on your Linux system, 
you can save the data instead to the hard drive (save to disk) and from there 
transfer the data to another computer by floppy disk.</p>");

    // support_question.ycp
    // present/ask question data

    term contents = `Dummy();
    if (output_format != "plain")
    {
	contents = `VBox (`RichText (wrapper_data));
    }
    else
    {
	contents = `VBox (`LogView (`id(`data), "", 7, 0));
    }
    contents = add (contents, `VSpacing (1.0));
    contents = add (contents, `RadioButtonGroup(
	`id(`rb),
	`VBox (
	    `Left (`HBox (
		// radio button
		`RadioButton (`id(`online), _("transmission via Internet to SuSE Support"), true),
		// radio button
		`RadioButton (`id(`disk), _("save to disk"), false)
	    ))
	)
	));

    // screen caption
    UI::SetWizardContents (_("SuSE Support"), contents, help, true, true);

    if (! lookup (regdata, "--all", false) != "")
    {
	UI::ChangeWidget(`id(`data), `Value, wrapper_data);
    }

    any ret = UI::UserInput();

    string all_files = reg_file + " " + user_file + " " + wrapper_file;

    if (ret == `next)
    {
	if (UI::QueryWidget (`id(`online), `Value) == true)
	{
	    if (SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/is_suse_there.sh") != 0)
	    {
		// cant connect to server, popup message 1 of 3
		string message_text = _("Can't connect to SuSE support server.");
		// cant connect to server, popup message 2 of 3
		message_text = message_text + "\n" + _("Please check your internet connection");
		// cant connect to server, popup message 3 of 3
		message_text = message_text + "\n" + _("or choose 'save to disk' and send a printed copy by mail.");
		UI::ErrorPopup (message_text);
		ret = `again;
	    }
	    else
	    {
		// popup message, about to connect to support server
		UI::MessagePopup (_("Sending data via Internet"));
		if (SCR::Execute(.target.bash, "/var/lib/support/send_support_request.pl " + all_files) != 0)
		{
		    // failed to upload data to server, popup message 1 of 3
		    string message_text = _("Can't connect to SuSE support server.");
		    // failed to upload data to server, popup message 2 of 3
		    message_text = message_text + "\n" + _("Please check your internet connection");
		    // failed to upload data to server, popup message 3 of 3
		    message_text = message_text + "\n" + _("or try again later.");
		    UI::ErrorPopup (message_text);
		    ret = `again;
		}
	    }
	}
	else if (UI::QueryWidget (`id(`disk), `Value) == true)
	{
	    string disk_file = "/tmp/support.request";
	    // popup message about where the "saving to disk" file resides
	    string disk_message = sformat (_("Saving data to %1"), disk_file);
	    UI::MessagePopup (disk_message);
	    SCR::Execute(.target.bash, "/bin/cat " + all_files + " > " + disk_file);
	}
    }

    SCR::Execute(.target.remove, user_file);
    SCR::Execute(.target.remove, wrapper_file);

    return ret;
}
